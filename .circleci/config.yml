# Check https://circleci.com/docs/2.0/ for more details
#
version: 2.1

defaults: &config_project_defaults
  working_directory: ~/repo

executors:
  node_default:
    docker:
      - image: circleci/node:lts
  python_default:
    docker:
      - image: circleci/python:3.7.4

commands:
  install_webapp:
    description: "Installs dependencies in preparation to build and deploy webapp"
    steps:
      - checkout
      - restore_cache:
          name: Restore latest node_modules from cache
          keys:
            - webapp-v1-{{ arch }}-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}-{{ .Revision }}
            - webapp-v1-{{ arch }}-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
            - webapp-v1-{{ arch }}-{{ .Branch }}
            - webapp-v1-{{ arch }}
      - run:
          working_directory: ~/repo/webapp
          command: npm install
      - run:
          working_directory: ~/repo/webapp/functions
          command: npm install
      - save_cache:
          name: Save post-install node_modules into cache
          key: webapp-v1-{{ arch }}-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}-{{ .Revision }}
          paths:
            - ~/repo/webapp/node_modules
            - ~/repo/webapp/functions/node_modules

jobs:
  webapp_build_deploy:
    <<: *config_project_defaults
    executor: node_default
    steps:
      - install_webapp
      - run:
          working_directory: ~/repo/webapp
          command: npm test
      - run:
          working_directory: ~/repo/webapp
          command: npm run build
      - run:
          working_directory: ~/repo/webapp
          command: env -u GOOGLE_APPLICATION_CREDENTIALS ./node_modules/.bin/firebase deploy --token=$FIREBASE_TOKEN
# Uncomment below if deploying to ec2
#      - run:
#          name: Create ssh key file
#          command: echo $PP_WS_KEY | base64 -d > ~/pp-ws-key.pem
#      - run:
#          name: Set ssh key file permissions
#          working_directory: ~/
#          command: chmod 400 ~/pp-ws-key.pem && chmod 755 ~
#      - run:
#          name: Send Files to Server
#          command: |
#            scp -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i "~/pp-ws-key.pem" ~/repo/webapp/build/* ubuntu@$SSH_HOST:/home/ubuntu/backend/react/ || true
  server_deploy:
    <<: *config_project_defaults
    executor: python_default
    steps:
      - checkout
      - run:
          name: Create ssh key file
          command: echo $PP_WS_KEY | base64 -d > ~/pp-ws-key.pem
      - run:
          name: Set ssh key file permissions
          working_directory: ~/
          command: chmod 400 pp-ws-key.pem
      - run:
          name: Install Pip3 and nginx
          command: |
            ssh -o StrictHostKeyChecking=no -i "~/pp-ws-key.pem" ubuntu@$SSH_HOST 'sudo apt update && sudo apt install -y python3-pip && sudo apt install -y nginx'
      - run:
          name: Create firebase admin private key json credentials
          command: echo $GOOGLE_APPLICATION_CREDENTIALS > ~/repo/backend/firebase-adminsdk.json
      - run:
          name: killall processes belonging to ubuntu - stop previous server, if any
          command: |
            ssh -o StrictHostKeyChecking=no -i "~/pp-ws-key.pem" ubuntu@$SSH_HOST 'sudo killall -u ubuntu' || true
      - run:
          name: Delete all files
          command: |
            ssh -o StrictHostKeyChecking=no -i "~/pp-ws-key.pem" ubuntu@$SSH_HOST 'rm -rf ./* && mkdir backend && ls -aL'
      - run:
          name: Send Files to Server
          command: |
            scp -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i "~/pp-ws-key.pem" ~/repo/backend/* ubuntu@$SSH_HOST:/home/ubuntu/backend/ || true
      - run:
          name: Move nginx config to config directory
          command: |
            ssh -o StrictHostKeyChecking=no -i "~/pp-ws-key.pem" ubuntu@$SSH_HOST 'sudo mv -f ~/backend/nginx.conf /etc/nginx/nginx.conf'
      - run:
          name: (Re)Start nginx
          command: |
            ssh -o StrictHostKeyChecking=no -i "~/pp-ws-key.pem" ubuntu@$SSH_HOST 'sudo /etc/init.d/nginx restart'
      - run:
          name: Install
          command: |
            ssh -o StrictHostKeyChecking=no -i "~/pp-ws-key.pem" ubuntu@$SSH_HOST 'cd ~/backend && pip3 install -r requirements.txt' || true
      - run:
          name: Start and exit
          command: |
            ssh -o StrictHostKeyChecking=no -i "~/pp-ws-key.pem" ubuntu@$SSH_HOST "FLASK_APP=backend FLASK_ENV=development GOOGLE_APPLICATION_CREDENTIALS=/home/ubuntu/backend/firebase-adminsdk.json nohup ~/.local/bin/flask run > flask.out 2> flask.err & "

workflows:
  version: 2
  master_flow:
    jobs:
      - server_deploy:
          filters:
            branches:
              only:
                - master
                - ci
      - webapp_build_deploy:
          filters:
            branches:
              only:
                - master
                - ci
          requires:
            - server_deploy
